Codigo Nuevo de motor + encoder



#define encoder 2
int encoder_pin = 2; // Pin 2, donde se conecta el encoder
unsigned int N; // [RPM] Revoluciones por minuto calculadas.
volatile byte n; // [pulses] Número de pulsos leídos por el Arduino
unsigned long timeold; // Tiempo almacenado
unsigned int S = 20; // Número de muescas que tiene el disco del encoder.
const int wheel_diameter = 64; // Diámetro de la rueda pequeña [mm]
float velocity = 0; // Velocity // Velocidad en [Km/h]
unsigned long last_interrupt_time = 0;  // Para manejar el debounce
unsigned long debounce_delay = 10; // Ajustado a 10 ms para mejorar el filtro de rebote

// Función de interrupción para contar los pulsos del encoder
void counter() {
  unsigned long interrupt_time = millis();
  // Solo cuenta si ha pasado el tiempo de debounce
  if (interrupt_time - last_interrupt_time > debounce_delay) {
    n++;  // Incrementa los pulsos
    last_interrupt_time = interrupt_time;  // Actualiza el tiempo de la última interrupción
  }
}

void setup() {
  Serial.begin(9600);  // Configuración del puerto serie
  pinMode(encoder_pin, INPUT);  // Configuración del pin del encoder
  attachInterrupt(digitalPinToInterrupt(encoder_pin), counter, RISING);  // Cambiado a RISING
  // Inicialización de los parámetros
  n = 0;
  N = 0;
  timeold = 0;
  Serial.println("");
  Serial.print(" Wheel ");
  Serial.print(" Seconds ");
  Serial.print("RPM ");
  Serial.print("Pulses ");
  Serial.println("Velocity [Km/h]");
}

void loop() {
  analogWrite(6, 0);
  analogWrite(5, 150);
  analogWrite(7, 0);
  analogWrite(8, 150);

  if (millis() - timeold >= 1000) {  // Se actualiza cada segundo, [t] es el tiempo de muestreo
    detachInterrupt(digitalPinToInterrupt(encoder_pin));  // Desconectamos la interrupción para evitar que interfiera con el cálculo
    // Calculamos las revoluciones por minuto (RPM) si hay pulsos válidos
    if (n > 0) {  // Solo calculamos la velocidad si ha habido pulsos
      N = (n * 60) / ((millis() - timeold) / 1000 * S);  // Calculamos las revoluciones por minuto [RPM]
      velocity = N * 3.1416 * wheel_diameter * 60 / 1000000;  // Cálculo de la velocidad en [Km/h]
    } else {
      velocity = 0;  // Si no hay pulsos, la velocidad es 0
    }

    // Si la velocidad calculada es muy baja, la establecemos en 0 (evitamos lecturas erróneas)
    if (velocity < 0.05) {  // Si la velocidad es menor que 0.05 km/h (un valor bajo, puedes ajustarlo)
      velocity = 0;
    }

    // Imprimir los valores por el puerto serie
    Serial.print(" ");
    Serial.print(millis() / 1000); 
    Serial.print(" ");
    Serial.print(N, DEC); 
    Serial.print(" ");
    Serial.print(n, DEC); 
    Serial.print(" ");
    Serial.println(velocity, 2);

    n = 0;  // Inicializamos los pulsos
    timeold = millis();  // Almacenamos el tiempo actual
    attachInterrupt(digitalPinToInterrupt(encoder_pin), counter, RISING);  // Reiniciamos la interrupción
  }
}
